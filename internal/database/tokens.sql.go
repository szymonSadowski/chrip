// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (created_at, updated_at, user_id, refresh_token, expires_at, revoked_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5, 
    $6
)
RETURNING refresh_token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UserID       uuid.UUID
	RefreshToken string
	ExpiresAt    time.Time
	RevokedAt    sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens WHERE refresh_token = $1 LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE refresh_tokens
SET
    revoked_at = $1,
    updated_at = $2
WHERE refresh_token = $3
RETURNING refresh_token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RevokeRefreshTokenParams struct {
	RevokedAt    sql.NullTime
	UpdatedAt    time.Time
	RefreshToken string
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, arg.RevokedAt, arg.UpdatedAt, arg.RefreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
